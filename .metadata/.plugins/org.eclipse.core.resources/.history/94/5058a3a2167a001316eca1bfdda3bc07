package com.amvg.milliyet.main;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.TranslateAnimation;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.google.analytics.tracking.android.GoogleAnalytics;
import com.google.analytics.tracking.android.Tracker;
import com.google.gson.annotations.SerializedName;
import com.mobilike.garantiad.GarantiAdManager;
import com.viewpagerindicator.CirclePageIndicator;
import com.viewpagerindicator.PageIndicator;

@SuppressLint(
{ "NewApi", "SetJavaScriptEnabled" })
public class Skorer extends FragmentActivity implements AnimationListener
{
	private ListView listView;
	public float dpHeight;
	public static float dpHeight_hp;
	private Display display;
	private DisplayMetrics outMetrics;
	public static int dikeyVideoSay;
	public int dikeyVideoSay_hp;
	private TestFragmentAdapter mAdapter;
	private ViewPager mPager;
	private PageIndicator mIndicator;
	private String DirName = "/sdcard/Milliyet/skorer/";
	private LinearLayout TopHeadlinesC_layout; // guncel
	private LinearLayout HomePage_layout;
	private LayoutInflater LayInfalater; // guncel
	public static TextView weatherDate;
	public static TextView weatherInfo;
	public static ImageView weatherImage;
	public static boolean imageClickControl;
	public static LinearLayout homeMainLayout;
	public static float scale;
	private LinearLayout CanliSkor;
	private LinearLayout Fikstur;
	private LinearLayout PuanDurumu;
	private LinearLayout Iddaa;
	private String CanliSkor_URL="http://m.skorer.com/Soccer/LiveScores.aspx";
	private String Fikstur_URL="http://m.skorer.com/Soccer/Fixture.aspx";
	private String PuanDurumu_URL="http://m.skorer.com/Soccer/LeagueTable.aspx";
	private String Iddaa_URL="http://m.skorer.com/Soccer/Iddaa.aspx";
	private Tracker mGaTracker;
	private GoogleAnalytics mGaInstance;
	public static ArrayList<DataModelNewsImageLoad> Array_TopHeadlinesC_Load;
	public static ArrayList<DataModelNewsImageLoad> Array_HomePage_Load;
	private int videoRowShowCount = 0; // videolardan kaçıncı satıra kadar gözükmesi gerektiğini tutar.
	private int videoRowShowCount_hp = 0;
	public ScrollViewExt sv;
	private Intent SkorerMenuIntent;
	private String Controller;
	private String CategoryName;
	private String CategoryID;
	private boolean IsMenuClicked=false;
	public AppMap appmap;
	public View menu;
	public ViewUtils viewUtils;
	public View app;
	public boolean menuOut = false;
	public static Context context;
	public AnimParams animParams = new AnimParams();
	public ListView listView_menu;
	private View BannerDivider;

	class ClickListener implements OnClickListener
	{
		@Override
		public void onClick(View v)
		{
			System.out.println("onClick " + new Date());
			Skorer me = Skorer.this;
			context = me;
			Animation anim;
			int w = app.getMeasuredWidth();
			int h = app.getMeasuredHeight();
			int left = (int) (getResources().getDisplayMetrics().density * 255);
			Log.e("Menu Genisligi=", Integer.toString(left));
			if (!menuOut)//slide menünün açılışı
			{
				anim = new TranslateAnimation(0, left, 0, 0);
				menu.setVisibility(View.VISIBLE);
				animParams.init(left, 0, left + w, h);
			} 
			else
			{ // slide menünün kapanışı
				anim = new TranslateAnimation(0, -left, 0, 0);
				animParams.init(0, 0, w, h);
			}
			anim.setDuration(500);
			anim.setAnimationListener(me);
			anim.setFillAfter(true);
			app.startAnimation(anim);
		}
	}

	public class SearchResponse
	{
		public List<Result> root;
	}

	public class Result
	{
		@SerializedName("Controller")
		public String Controller;

		@SerializedName("Ref")
		public String Ref;

		@SerializedName("Title")
		public String Title;

		@SerializedName("CID")
		public String CID;
	}

	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_skorer);
		Calendar c = Calendar.getInstance(); 
		int year = c.get(Calendar.YEAR);
		((TextView)findViewById(R.id.Copyrigth)).setText("Copyright \u00A9 "+Integer.toString(year)+" Milliyet");
		dikeyVideoSay_hp = 0;
		viewUtils = new ViewUtils();
		menu = findViewById(R.id.menu);
		app = findViewById(R.id.app);
		viewUtils.printView("menu", menu);
		viewUtils.printView("app", app);
		listView_menu = (ListView) menu.findViewById(R.id.list_View_Menu);
		listView_menu.invalidateViews();
		MainMenuAccessData mainMenuAccessData = new MainMenuAccessData(getApplicationContext(), listView_menu);
		mainMenuAccessData.execute("");
		viewUtils.initListView(this, listView_menu, "Item ", 30,R.id.list_View_Menu, getApplicationContext(), Skorer.this); // ,
		mGaInstance = GoogleAnalytics.getInstance(this);
		mGaTracker = mGaInstance.getTracker("UA-15581378-12"); // Placeholder
		BannerDivider=(View)findViewById(R.id.BannerDivider);
		if (Home.HasBanner)
		{
			BannerDivider.setVisibility(View.VISIBLE);
		}
		imageClickControl = true;
		try
		{
			Skorer.scale = this.getResources().getDisplayMetrics().density;
		} 
		catch (Exception e)
		{
			// TODO: handle exception
		}
		
		
    	GarantiAdManager.loadAd(this, providerUrl, new GarantiAdManager.AdListener() {
			
			@Override
			public void onLoad()
			{
			}
			
			@Override
			public void onError()
			{
			}
			
		});
		
		Array_TopHeadlinesC_Load = new ArrayList<DataModelNewsImageLoad>();
		Array_HomePage_Load = new ArrayList<DataModelNewsImageLoad>();
		appmap = new AppMap(getApplicationContext(), Skorer.this);
		mPager = (ViewPager) findViewById(R.id.pager);
		mIndicator = (CirclePageIndicator) findViewById(R.id.indicator);
		sv = new ScrollViewExt(getApplicationContext());
		sv = (ScrollViewExt) findViewById(R.id.scrollview);
		sv.setScrollViewListener(new OnScrollViewListener()
		{
			@Override
			public void onScrollChanged(ScrollViewExt scrollView, int x, int y,int oldx, int oldy)
			{
				// TODO Auto-generated method stub
				boolean flag = true;
				flag = true;
				if ((y / scale) / 89 > videoRowShowCount+dikeyVideoSay && dikeyVideoSay + videoRowShowCount < Skorer.Array_TopHeadlinesC_Load.size())
				{
					String[] urlAddress;
					urlAddress = Array_TopHeadlinesC_Load.get(dikeyVideoSay + videoRowShowCount).getImageURL().split("/");
					try
					{
						if (!(new File(DirName + urlAddress[urlAddress.length - 1])).exists())
						{
							new DownloadImageTask(Array_TopHeadlinesC_Load.get(dikeyVideoSay + videoRowShowCount).getNewsImage(),urlAddress[urlAddress.length - 1], DirName, Skorer.Array_TopHeadlinesC_Load.get( dikeyVideoSay + videoRowShowCount).getIsShown()).execute(Array_TopHeadlinesC_Load.get(dikeyVideoSay + videoRowShowCount).getImageURL());
						} 
						else
						{
							Array_TopHeadlinesC_Load.get(dikeyVideoSay + videoRowShowCount).getNewsImage().setImageURI(Uri.fromFile(new File(DirName + urlAddress[urlAddress.length - 1])));
							Skorer.Array_TopHeadlinesC_Load.get( dikeyVideoSay + videoRowShowCount).setIsShown(true);
						}
					} 
					catch (Exception e)
					{
						flag = false;
					}

					if (flag)
					{
						videoRowShowCount++;
					}
				}
				boolean flag2 = true;
				flag2 = true;
				if ((y / scale + dpHeight_hp) / 89 > videoRowShowCount_hp && videoRowShowCount_hp < Skorer.Array_HomePage_Load.size() && !Skorer.Array_HomePage_Load.get(videoRowShowCount_hp).getIsShown())
				{
					String[] urlAddress;
					urlAddress = Array_HomePage_Load.get(videoRowShowCount_hp).getImageURL().split("/");
					try
					{
						if (!Array_HomePage_Load.get(videoRowShowCount_hp).getImageURL().equals(""))
						{
							Log.e("girdi", "girdi");
							if (!(new File(DirName+ urlAddress[urlAddress.length - 1])).exists())
							{
								new DownloadImageTask(Array_HomePage_Load.get(videoRowShowCount_hp).getNewsImage(),urlAddress[urlAddress.length - 1], DirName,Skorer.Array_HomePage_Load.get(videoRowShowCount_hp).getIsShown()).execute(Array_HomePage_Load.get(videoRowShowCount_hp).getImageURL());
							} 
							else
							{
								Array_HomePage_Load.get(videoRowShowCount_hp).getNewsImage().setImageURI(Uri.fromFile(new File(DirName + urlAddress[urlAddress.length - 1])));
								Skorer.Array_HomePage_Load.get(videoRowShowCount_hp).setIsShown(true);
							}
						}
						else
						{
							Array_HomePage_Load.get(videoRowShowCount_hp).getNewsImage().setImageResource(R.drawable.thumb);
						}
					} 
					catch (Exception e)
					{
						flag2 = false;
					}
					if (flag2)
					{
						videoRowShowCount_hp++;
					}
				}
			}
		});

		mIndicator.setOnPageChangeListener(new OnPageChangeListener()
		{
			@Override
			public void onPageSelected(int arg0)
			{
				// TODO Auto-generated method stub
			}

			@Override
			public void onPageScrolled(int arg0, float arg1, int arg2)
			{
				// TODO Auto-generated method stub
			}

			@Override
			public void onPageScrollStateChanged(int arg0)
			{
				// TODO Auto-generated method stub
			}
		});
		
		mPager.setOnTouchListener(new View.OnTouchListener() {

	        @Override
	        public boolean onTouch(View v, MotionEvent event) {
	            v.getParent().requestDisallowInterceptTouchEvent(true);
	            return false;
	        }
	    });

		mPager.setOnPageChangeListener(new OnPageChangeListener() {

	        @Override
	        public void onPageSelected(int arg0) {
	        }

	        @Override
	        public void onPageScrolled(int arg0, float arg1, int arg2) {
	            mPager.getParent().requestDisallowInterceptTouchEvent(true);
	        }

	        @Override
	        public void onPageScrollStateChanged(int arg0) {
	        }
	    });

//		mPager.setOnTouchListener(new View.OnTouchListener()
//		{
//			@Override
//			public boolean onTouch(View v, MotionEvent event)
//			{
//				sv.requestDisallowInterceptTouchEvent(true);
//				return false;
//			}
//		});
		LayInfalater = getLayoutInflater();
		TopHeadlinesC_layout = (LinearLayout) findViewById(R.id.TopHeadlinesC_layout);
		HomePage_layout = (LinearLayout) findViewById(R.id.HomePage_layout);
		homeMainLayout = (LinearLayout) findViewById(R.id.homeMainLayout);
		homeMainLayout.setVisibility(View.VISIBLE);
		weatherDate = (TextView) findViewById(R.id.date);
		weatherInfo = (TextView) findViewById(R.id.weatherData);
		weatherImage = (ImageView) findViewById(R.id.image);
		CanliSkor=(LinearLayout)findViewById(R.id.CanliSkor);
		Fikstur=(LinearLayout)findViewById(R.id.Fikstur);
		PuanDurumu=(LinearLayout)findViewById(R.id.PuanDurumu);
		Iddaa=(LinearLayout)findViewById(R.id.iddaa);
		SkorerMenuIntent=new Intent(Intent.ACTION_VIEW);
		CanliSkor.setOnClickListener(new OnClickListener()
		{
			@Override
			public void onClick(View v)
			{
				// TODO Auto-generated method stub
				SkorerMenuIntent.setData(Uri.parse(CanliSkor_URL));
				startActivity(SkorerMenuIntent);
			}
		});
		Fikstur.setOnClickListener(new OnClickListener()
		{
			@Override
			public void onClick(View v)
			{
				// TODO Auto-generated method stub
				SkorerMenuIntent.setData(Uri.parse(Fikstur_URL));
				startActivity(SkorerMenuIntent);
			}
		});
		PuanDurumu.setOnClickListener(new OnClickListener()
		{
			@Override
			public void onClick(View v)
			{
				// TODO Auto-generated method stub
				SkorerMenuIntent.setData(Uri.parse(PuanDurumu_URL));
				startActivity(SkorerMenuIntent);
			}
		});
		Iddaa.setOnClickListener(new OnClickListener()
		{
			@Override
			public void onClick(View v)
			{
				// TODO Auto-generated method stub
				SkorerMenuIntent.setData(Uri.parse(Iddaa_URL));
				startActivity(SkorerMenuIntent);
			}
		});
		display = getWindowManager().getDefaultDisplay();
		outMetrics = new DisplayMetrics();
		display.getMetrics(outMetrics);
		dpHeight = outMetrics.heightPixels / (getResources().getDisplayMetrics().density);
		dpHeight -= 265;
		SkorerAccessData accessData = new SkorerAccessData(getApplicationContext(),listView, this, getSupportFragmentManager(), mAdapter, mPager,mIndicator, TopHeadlinesC_layout, HomePage_layout,LayInfalater, dpHeight);
		final String[] in = { "in" };
		try
		{
			if (accessData.areFilesOK())
			{
				accessData.readData();
			} 
			else
			{
				accessData.execute(in);
			}
		} 
		catch (IOException e)
		{
			Toast.makeText(getApplicationContext(), "Bağlantı Hatası", Toast.LENGTH_LONG).show();
			finish();
			e.printStackTrace();
		} 
		catch (ParseException e)
		{
			Toast.makeText(getApplicationContext(), "Bağlantı Hatası", Toast.LENGTH_LONG).show();
			finish();
			e.printStackTrace();
		}

		ImageView menuLogo = (ImageView) findViewById(R.id.menuImage);
		menuLogo.setOnClickListener(new ClickListener());
		final ImageView refreshLogo = (ImageView) findViewById(R.id.refreshImage);
		refreshLogo.setOnClickListener(new OnClickListener()
		{
			@Override
			public void onClick(View v)
			{
				// TODO Auto-generated method stub
				Array_TopHeadlinesC_Load.clear();
				Array_HomePage_Load.clear();
				videoRowShowCount = 0;
				videoRowShowCount_hp = 0;
				SkorerAccessData access = new SkorerAccessData(getApplicationContext(), listView, Skorer.this,getSupportFragmentManager(), mAdapter, mPager,mIndicator, TopHeadlinesC_layout, HomePage_layout,LayInfalater, dpHeight);
				access.execute(in);
				sv.scrollTo(0, 0);
			}
		});
		final ImageView mainLogo = (ImageView) findViewById(R.id.logoImage);
		mainLogo.setOnClickListener(new OnClickListener()
		{
			@Override
			public void onClick(View v)
			{
				// TODO Auto-generated method stub

			}
		});
	}

	@Override
	public void onStart()
	{
		super.onStart();
		mGaTracker.sendView("/Skorer");
	}

	@Override
	public void onBackPressed()
	{
		finish();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event)
	{
		if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0)
		{
			getSharedPreferences("PREFERENCE", MODE_PRIVATE).edit().putBoolean("firstrun", true).commit();
			finish();
			return true;
		}
		return super.onKeyDown(keyCode, event);
	}

	public static void setClickable(boolean value)
	{
		for (int i = 0; i < Array_TopHeadlinesC_Load.size(); i++)
		{
			Array_TopHeadlinesC_Load.get(i).getItemLayout().setClickable(value);
		}
		for (int i = 0; i < Array_HomePage_Load.size(); i++)
		{
			Array_HomePage_Load.get(i).getItemLayout().setClickable(value);
		}
	}

	void layoutApp(boolean menuOut)
	{
		System.out.println("layout [" + animParams.left + "," + animParams.top+ "," + animParams.right + "," + animParams.bottom + "]");
		FrameLayout.LayoutParams params = (FrameLayout.LayoutParams)app.getLayoutParams();
		if (menuOut)
		{
			
			params.setMargins(animParams.left, 0, -animParams.left, 0); 	
			params.gravity=Gravity.TOP;
		}
		else
		{
			params.setMargins(0, 0, 0, 0); 
		}
		app.setLayoutParams(params);
		app.clearAnimation();
	}

	@Override
	public void onAnimationEnd(Animation animation)
	{
		System.out.println("onAnimationEnd");
		viewUtils.printView("menu", menu);
		viewUtils.printView("app", app);
		menuOut = !menuOut;
		if (!menuOut)
		{
			menu.setVisibility(View.INVISIBLE);
			listView_menu.setEnabled(true);
			if (Controller!=null)
			{
            	if (!Controller.endsWith("Skorer") && IsMenuClicked)
    			{
    				appmap.RunActivity(Controller,CategoryName, CategoryID,"");
    				IsMenuClicked=false;
    			}
			}
		}
		layoutApp(menuOut);
	}

	@Override
	public void onAnimationRepeat(Animation animation)
	{
		// TODO Auto-generated method stub
	}

	@Override
	public void onAnimationStart(Animation animation)
	{
		// TODO Auto-generated method stub
	}

	static class AnimParams
	{
		int left, right, top, bottom;
		void init(int left, int top, int right, int bottom)
		{
			this.left = left;
			this.top = top;
			this.right = right;
			this.bottom = bottom;
		}
	}

	class ViewUtils
	{
		private ViewUtils()
		{

		}
		public void setViewWidths(View view, View[] views)
		{
			int w = view.getWidth();
			int h = view.getHeight();
			for (int i = 0; i < views.length; i++)
			{
				View v = views[i];
				v.layout((i + 1) * w, 0, (i + 2) * w, h);
				printView("view[" + i + "]", v);
			}
		}

		public void printView(String msg, View v)
		{
			System.out.println(msg + "=" + v);
			if (null == v)
			{
				return;
			}
			System.out.print("[" + v.getLeft());
			System.out.print(", " + v.getTop());
			System.out.print(", w=" + v.getWidth());
			System.out.println(", h=" + v.getHeight() + "]");
			System.out.println("mw=" + v.getMeasuredWidth() + ", mh=" + v.getMeasuredHeight());
			System.out.println("scroll [" + v.getScrollX() + "," + v.getScrollY() + "]");
		}

		public void initListView(Context context, final ListView listView, String prefix, int numItems, int layout, final Context contextGetApplication, final Context contextThis)
		{
			listView.setOnItemClickListener(new OnItemClickListener()
			{
				@Override
				public void onItemClick(AdapterView<?> parent, View view, int position, long id)
				{
					listView.setEnabled(false);
					IsMenuClicked=true;
					Controller=((TextView) view.findViewById(R.id.controller)).getText().toString();
					CategoryName=((TextView) view.findViewById(R.id.empty)).getText().toString();
					CategoryID=((TextView) view.findViewById(R.id.CID)).getText().toString();
					Log.e("Controller",Controller);
					Log.e("CategoryName",CategoryName);
					Log.e("CategoryID",CategoryID);
					itemClickMenuCloser();
				}
			});
		}

		public void itemClickMenuCloser()
		{
			Context context = Skorer.context;
			Animation anim;
			int w = app.getMeasuredWidth();
			int h = app.getMeasuredHeight();
			int left = (int) (getResources().getDisplayMetrics().density * 255);
			anim = new TranslateAnimation(0, -left, 0, 0);
			animParams.init(0, 0, w, h);
			anim.setDuration(500);
			anim.setAnimationListener((AnimationListener) context);
			anim.setFillAfter(true);
			app.startAnimation(anim);
		}
	}
}
